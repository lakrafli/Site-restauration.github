Voici un rappel bref des différents concepts et étapes pour la partie backend que vous avez mentionnée :

### Docker

**Mise en place de Docker :**
1. **Dockerfile** : Fichier contenant les instructions pour construire une image Docker.
    ```Dockerfile
    # Exemple de Dockerfile
    FROM node:14
    WORKDIR /app
    COPY . .
    RUN npm install
    CMD ["node", "app.js"]
    ```

2. **Build d'image Docker :**
    ```sh
    docker build -t nom_image .
    ```

3. **docker-compose.yml** : Fichier de configuration pour définir et gérer des applications multi-conteneurs.
    ```yaml
    version: '3'
    services:
      web:
        build: .
        ports:
          - "5000:5000"
    ```

4. **Démarrer les conteneurs avec Docker Compose :**
    ```sh
    docker-compose up -d --build
    ```

### Base de Données

**Commandes de base :**
- **MySQL :**
    ```sh
    # Accéder au shell MySQL
    mysql -u root -p
    
    # Créer une base de données
    CREATE DATABASE nom_base;
    
    # Utiliser une base de données
    USE nom_base;
    
    # Créer une table
    CREATE TABLE utilisateurs (id INT AUTO_INCREMENT, nom VARCHAR(100), PRIMARY KEY(id));
    
    # Insérer des données
    INSERT INTO utilisateurs (nom) VALUES ('Alice');

** Vérifier les ports ouverts sur votre machine : sudo netstat -tuln
**Explications des options de commandes** :
** docker-compose up -d --build :
up : Démarre les containers définis dans le fichier docker-compose.yml.
-d : Démarre les containers en arrière-plan (mode détaché).
--build : Reconstruit les images avant de démarrer les containers.


**Lister les bases de données **: \l
**Se connecter à une base de données **: \c mydatabase
**Lister les tables :\dt
**Afficher la structure d'une table : \d nom_de_la_table
**Mettre à jour des données :UPDATE users SET name = 'Jane Doe' WHERE email = 'john@example.com';
** Assure-toi de rendre le script exécutable : chmod +x setup.sh
**  executer  : ./setup.sh

    ```

### Apache Tomcat

**Trouver le port sur lequel se connecter :**
- Par défaut, Apache Tomcat utilise le port 8080. Vous pouvez vérifier le port en consultant le fichier `server.xml` :
    ```xml
    <!-- server.xml -->
    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    ```

### Exécuter un fichier .sh (shell)

1. **Donner les permissions d'exécution au fichier :**
    ```sh
    chmod +x script.sh
    ```

2. **Exécuter le fichier :**
    ```sh
    ./script.sh
    ```


	Exemple complet
**Création du fichier**

nano setup.sh
**Ajoute ce contenu dans 'setup.sh :**
----------------------------------------- 
#!/bin/bash

# Démarrer Docker Compose

docker-compose up -d --build

**# Attendre que PostgreSQL soit prêt**
sleep 10

**# Exécuter les commandes SQL**
docker exec -i <nom_du_container_postgres> psql -U user -d mydatabase <<EOF
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(80) NOT NULL,
    email VARCHAR(120) UNIQUE NOT NULL
);

INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
INSERT INTO users (name, email) VALUES ('Jane Doe', 'jane@example.com');
EOF
------------------------	---------------------------------------

**Rendre le fichier exécutable**
chmod +x setup.sh
**Exécuter le fichier**

./setup.sh



### PHP

**Méthodes HTTP (POST, GET, PUT) et gestion de formulaires :**
- **GET :**
    ```php
    if ($_SERVER["REQUEST_METHOD"] == "GET") {
        $nom = $_GET['nom'];
    }
    ```

- **POST :**
    ```php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $nom = $_POST['nom'];
    }
    ```

- **PUT (nécessite des configurations supplémentaires) :**
    ```php
    parse_str(file_get_contents("php://input"), $_PUT);
    if ($_SERVER["REQUEST_METHOD"] == "PUT") {
        $nom = $_PUT['nom'];
    }
    ```

### Requêtes HTTP

**Exemple avec cURL :**
- **GET :**
    ```sh
    curl -X GET http://example.com/api/resource
    ```

- **POST :**
    ```sh
    curl -X POST -d "param1=value1&param2=value2" http://example.com/api/resource
    ```

### Requêtes Base de Données (avec PDO en PHP)

1. **Connexion à la base de données :**
    ```php
    $dsn = 'mysql:host=localhost;dbname=nom_base';
    $username = 'root';
    $password = '';
    $options = [];

    try {
        $pdo = new PDO($dsn, $username, $password, $options);
    } catch (PDOException $e) {
        echo 'Connection failed: ' . $e->getMessage();
    }
    ```

2. **Exécuter une requête SELECT :**
    ```php
    $stmt = $pdo->query("SELECT * FROM utilisateurs");
    while ($row = $stmt->fetch()) {
        echo $row['nom'] . "\n";
    }
    ```

3. **Exécuter une requête INSERT :**
    ```php
    $sql = "INSERT INTO utilisateurs (nom) VALUES (:nom)";
    $stmt = $pdo->prepare($sql);
    $stmt->execute(['nom' => 'Alice']);
    ```

Utilisation de Fetch API dans JavaScript
Exemple de requêtes HTTP avec Fetch API

// GET request
fetch('http://localhost:5000/users')
  .then(response => response.json())
  .then(data => console.log(data));

// POST request
fetch('http://localhost:5000/user', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({ name: 'Jane Doe', email: 'jane@example.com' }),
})
  .then(response => response.json())
  .then(data => console.log(data));

**********************************

   IP_HOTE:PORT_ECOUTE_EXTERIEUR_CONTENEUR->PORT_ECOUTE_INTERIEUR_CONTENEUR/PROCOTOLE_RESEAU
kn_18@einfolearning:~/Téléchargements/tp4_app_rest_dockerise_etudiant$  docker ps
CONTAINER ID   IMAGE                                        COMMAND                  CREATED              STATUS              PORTS                                       NAMES
9146a1e66df0   tp4_app_rest_dockerise_etudiant_postgresql   "su postgres -c '/us…"   About a minute ago   Up About a minute   0.0.0.0:4633->5432/tcp, :::4633->5432/tcp   tp4_app_rest_dockerise_etudiant_postgresql_1
af9186d30083   tp4_app_rest_dockerise_etudiant_tomcat       "/opt/tomcat/bin/cat…"   About a minute ago   Up About a minute   0.0.0.0:6480->8080/tcp, :::6480->8080/tcp   tp4_app_rest_dockerise_etudian

Donnez le nom de l'hôte ou son adresse IP tel que renvoyé par la commande que vous avez exécuté  : localhost 
Quel est le port que nous devons utiliser à l'extérieur du conteneur (au niveau de l'hôte) pour communiquer avec le serveur de base de données
