**Voici un rappel bref des différents concepts et étapes pour la partie backend que vous avez mentionnée :**

document.addEventListener('DOMContentLoaded', function() {
    // Add Employee
    const addEmployeeForm = document.getElementById('addEmployeeForm');
    if (addEmployeeForm) {
        addEmployeeForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value;
            const address = document.getElementById('address').value;

            fetch('http://localhost:6480/api/employees', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: name,
                    email: email,
                    phone: phone,
                    address: address
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Employee added:', data);
                alert('Employee added successfully!');
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding employee.');
            });
        });
    }

    // Delete Employee
    const deleteEmployeeForm = document.getElementById('deleteEmployeeForm');
    if (deleteEmployeeForm) {
        deleteEmployeeForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const id = document.getElementById('id').value;

            fetch(`http://localhost:6480/api/employees/${id}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Employee deleted:', data);
                alert('Employee deleted successfully!');
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting employee.');
            });
        });
    }
});


#delete
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Employee</title>
    <link rel="stylesheet" href="employee.css">
</head>
<body>
    <h1>Delete Employee</h1>
    <form id="deleteEmployeeForm">
        <label for="id">Employee ID:</label>
        <input type="text" id="id" name="id" required>
        <br>
        <button type="submit">Delete Employee</button>
    </form>
    <script src="employee.js"></script>
</body>
</html>










### Docker
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Employee</title>
    <link rel="stylesheet" href="employee.css">
</head>
<body>
    <h1>Add Employee</h1>
    <form id="addEmployeeForm">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>
        <br>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <br>
        <label for="phone">Phone:</label>
        <input type="text" id="phone" name="phone" required>
        <br>
        <label for="address">Address:</label>
        <input type="text" id="address" name="address" required>
        <br>
        <button type="submit">Add Employee</button>
    </form>
    <script src="employee.js"></script>
</body>
</html>
**Mise en place de Docker :**
1. **Dockerfile** : Fichier contenant les instructions pour construire une image Docker.
    ```Dockerfile
    # Exemple de Dockerfile
    FROM node:14
    WORKDIR /app
    COPY . .
    RUN npm install
    CMD ["node", "app.js"]
    ```

2. **Build d'image Docker :**
    ```sh
    docker build -t nom_image .
    ```

3. **docker-compose.yml** : Fichier de configuration pour définir et gérer des applications multi-conteneurs.
    ```yaml
    version: '3'
    services:
      web:
        build: .
        ports:
          - "5000:5000"
    ```

4. **Démarrer les conteneurs avec Docker Compose :**
    ```sh
    docker-compose up -d --build
    ```

### Base de Données

**Commandes de base :**
- **MySQL :**
    ```sh
    # Accéder au shell MySQL
    mysql -u root -p
    
    # Créer une base de données
    CREATE DATABASE nom_base;
    
    # Utiliser une base de données
    USE nom_base;
    
    # Créer une table
    CREATE TABLE utilisateurs (id INT AUTO_INCREMENT, nom VARCHAR(100), PRIMARY KEY(id));
    
    # Insérer des données
    INSERT INTO utilisateurs (nom) VALUES ('Alice');

** Vérifier les ports ouverts sur votre machine : sudo netstat -tuln
**Explications des options de commandes** :
** docker-compose up -d --build :
up : Démarre les containers définis dans le fichier docker-compose.yml.
-d : Démarre les containers en arrière-plan (mode détaché).
--build : Reconstruit les images avant de démarrer les containers.


**Lister les bases de données **: \l
**Se connecter à une base de données **: \c mydatabase
**Lister les tables :\dt
**Afficher la structure d'une table : \d nom_de_la_table
**Mettre à jour des données :UPDATE users SET name = 'Jane Doe' WHERE email = 'john@example.com';
** Assure-toi de rendre le script exécutable : chmod +x setup.sh
**  executer  : ./setup.sh

    ```

### Apache Tomcat

**Trouver le port sur lequel se connecter :**
- Par défaut, Apache Tomcat utilise le port 8080. Vous pouvez vérifier le port en consultant le fichier `server.xml` :
    ```xml
    <!-- server.xml -->
    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    ```

### Exécuter un fichier .sh (shell)

1. **Donner les permissions d'exécution au fichier :**
    ```sh
    chmod +x script.sh
    ```

2. **Exécuter le fichier :**
    ```sh
    ./script.sh
    ```


	Exemple complet
**Création du fichier**

nano setup.sh
**Ajoute ce contenu dans 'setup.sh :**
----------------------------------------- 
#!/bin/bash

# Démarrer Docker Compose

docker-compose up -d --build

**# Attendre que PostgreSQL soit prêt**
sleep 10

**# Exécuter les commandes SQL**
docker exec -i <nom_du_container_postgres> psql -U user -d mydatabase <<EOF
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(80) NOT NULL,
    email VARCHAR(120) UNIQUE NOT NULL
);

INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
INSERT INTO users (name, email) VALUES ('Jane Doe', 'jane@example.com');
EOF
------------------------	---------------------------------------

**Rendre le fichier exécutable**
chmod +x setup.sh
**Exécuter le fichier**

./setup.sh



### PHP

**Méthodes HTTP (POST, GET, PUT) et gestion de formulaires :**
- **GET :**
    ```php
    if ($_SERVER["REQUEST_METHOD"] == "GET") {
        $nom = $_GET['nom'];
    }
    ```

- **POST :**
    ```php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $nom = $_POST['nom'];
    }
    ```

- **PUT (nécessite des configurations supplémentaires) :**
    ```php
    parse_str(file_get_contents("php://input"), $_PUT);
    if ($_SERVER["REQUEST_METHOD"] == "PUT") {
        $nom = $_PUT['nom'];
    }
    ```

### Requêtes HTTP

**Exemple avec cURL :**
- **GET :**
    ```sh
    curl -X GET http://example.com/api/resource
    ```

- **POST :**
    ```sh
    curl -X POST -d "param1=value1&param2=value2" http://example.com/api/resource
    ```

### Requêtes Base de Données (avec PDO en PHP)

1. **Connexion à la base de données :**
    ```php
    $dsn = 'mysql:host=localhost;dbname=nom_base';
    $username = 'root';
    $password = '';
    $options = [];

    try {
        $pdo = new PDO($dsn, $username, $password, $options);
    } catch (PDOException $e) {
        echo 'Connection failed: ' . $e->getMessage();
    }
    ```

2. **Exécuter une requête SELECT :**
    ```php
    $stmt = $pdo->query("SELECT * FROM utilisateurs");
    while ($row = $stmt->fetch()) {
        echo $row['nom'] . "\n";
    }
    ```

3. **Exécuter une requête INSERT :**
    ```php
    $sql = "INSERT INTO utilisateurs (nom) VALUES (:nom)";
    $stmt = $pdo->prepare($sql);
    $stmt->execute(['nom' => 'Alice']);
    ```

Utilisation de Fetch API dans JavaScript
Exemple de requêtes HTTP avec Fetch API

// GET request
fetch('http://localhost:5000/users')
  .then(response => response.json())
  .then(data => console.log(data));

// POST request
fetch('http://localhost:5000/user', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({ name: 'Jane Doe', email: 'jane@example.com' }),
})
  .then(response => response.json())
  .then(data => console.log(data));

**********************************

   IP_HOTE:PORT_ECOUTE_EXTERIEUR_CONTENEUR->PORT_ECOUTE_INTERIEUR_CONTENEUR/PROCOTOLE_RESEAU
kn_18@einfolearning:~/Téléchargements/tp4_app_rest_dockerise_etudiant$  docker ps
CONTAINER ID   IMAGE                                        COMMAND                  CREATED              STATUS              PORTS                                       NAMES
9146a1e66df0   tp4_app_rest_dockerise_etudiant_postgresql   "su postgres -c '/us…"   About a minute ago   Up About a minute   0.0.0.0:4633->5432/tcp, :::4633->5432/tcp   tp4_app_rest_dockerise_etudiant_postgresql_1
af9186d30083   tp4_app_rest_dockerise_etudiant_tomcat       "/opt/tomcat/bin/cat…"   About a minute ago   Up About a minute   0.0.0.0:6480->8080/tcp, :::6480->8080/tcp   tp4_app_rest_dockerise_etudian

Donnez le nom de l'hôte ou son adresse IP tel que renvoyé par la commande que vous avez exécuté  : localhost 
Quel est le port que nous devons utiliser à l'extérieur du conteneur (au niveau de l'hôte) pour communiquer avec le serveur de base de données:4633





**********
Partie 1 - Partie backend : Test de la connexion

Rappel : syntaxe de la commande de psql

psql -h hote -d nom_base_donnees -p port_reseau -U nom_utilisateur

Voici les informations pour se connecter à la base de données (pour l'hôte et le port d'écoute, vous les avez déterminez dans le questions précédentes) :

base de donnee : devavance_db
user : devavance_user

Question : Connectez vous à la base de données. Affichez les tables éventuelles et expliquez le résultat.

Note :

    les options de la commande psql respecterons l'ordre donnée en exemple.
    Vous refermerez la connexion après vos observations.

./run_script_bd.sh tp4_app_rest_dockerise_etudiant_postgresql_1 : ca ma donne ca :./run_script_bd.sh tp4_app_rest_dockerise_etudiant_postgresql_1
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   614  100   614    0     0  18480      0 --:--:-- --:--:-- --:--:-- 18606
employee_bd.sql
psql:employee_bd.sql:1: NOTICE:  table "employee" does not exist, skipping
DROP TABLE
CREATE TABLE
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1

Combien de tables ont été crée par le script ?
***********
Quelle est la requête que vous avez exécuter pour listez tous les employés

**Note** : Donnez la version la plus courte, en utilisant l'opérateur `*` pour la projection.


connecter dur bdd :Psql -h localhost -p 4633 -U postgres
lnacer docker; docker-compose up -d --build

le droit: 

**En minuscules ! Et pas d'espaces superflus !**



Apache docker-compose up -d --build est un conteneur de servlets (application Web écrite en Java tournant dans le serveur). On parle aussi de serveur d'applications Web Java.

Combien de services REST sont exposés par le serveur Tomcat
Explication de la communication

	•	Requêtes HTTP : Le frontend envoie des requêtes HTTP (GET, POST, PUT, DELETE) au backend.
	•	Endpoints RESTful : Les endpoints sont définis pour chaque opération sur les employés.
	•	Réponses du serveur : Le backend renvoie les données ou les messages de succès/erreur.
	•	Gestion des données côté frontend : Le frontend met à jour l’interface utilisateur avec les données reçues.document.addEventListener('DOMContentLoaded', function() {
    // Add Employee
    const addEmployeeForm = document.getElementById('addEmployeeForm');
    if (addEmployeeForm) {
        addEmployeeForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value;
            const address = document.getElementById('address').value;

            fetch('http://localhost:6480/api/employees', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: name,
                    email: email,
                    phone: phone,
                    address: address
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Employee added:', data);
                alert('Employee added successfully!');
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding employee.');
            });
        });
    }

    // Delete Employee
    const deleteEmployeeForm = document.getElementById('deleteEmployeeForm');
    if (deleteEmployeeForm) {
        deleteEmployeeForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const id = document.getElementById('id').value;

            fetch(`http://localhost:6480/api/employees/${id}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Employee deleted:', data);
                alert('Employee deleted successfully!');
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting employee.');
            });
        });
    }
});
index 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management</title>
    <link rel="stylesheet" href="employee.css">
</head>
<body>
    <h1>Employee Management</h1>
    <nav>
        <ul>
            <li><a href="add_employee.html">Add Employee</a></li>
            <li><a href="delete_employee.html">Delete Employee</a></li>
        </ul>
    </nav>
    <!-- Other content -->
    <script src="employee.js"></script>
</body>
</html>
